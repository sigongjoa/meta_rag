name: v2 CI/CD for Meta-RAG Backend (Terraform)

on:
  push:
    branches:
      - main

env:
  GCP_REGION: asia-northeast3
  GAR_REPOSITORY: meta-rag-repo
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: meta-rag-repo
  SERVICE_NAME: meta-rag-backend-v2

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest

  deploy-gcp:
    name: Build and Deploy to GCP Cloud Run
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Docker Image to GAR
        id: build-gcp-image
        run: |
          IMAGE_TAG=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image_name=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init for GCP
        run: terraform -chdir=terraform/gcp init -upgrade

      - name: Terraform Plan for GCP
        env:
          TF_VAR_vector_index_dimensions: 384
          TF_VAR_vector_index_contents_uri: "gs://meta_rag_bucket/embeddings/"
        run: terraform -chdir=terraform/gcp plan -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var="image_name=${{ steps.build-gcp-image.outputs.image_name }}"

      - name: Terraform Apply for GCP
        env:
          TF_VAR_vector_index_dimensions: 384
          TF_VAR_vector_index_contents_uri: "gs://meta_rag_bucket/embeddings/"
        run: terraform -chdir=terraform/gcp apply -auto-approve -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var="image_name=${{ steps.build-gcp-image.outputs.image_name }}"

  deploy-aws:
    name: Build and Deploy to AWS ECR
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        id: build-aws-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image_name=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init for AWS
        run: terraform -chdir=terraform/aws init

      - name: Terraform Plan for AWS
        run: terraform -chdir=terraform/aws plan -var="image_name=${{ steps.build-aws-image.outputs.image_name }}"

      - name: Terraform Apply for AWS
        run: terraform -chdir=terraform/aws apply -auto-approve -var="image_name=${{ steps.build-aws-image.outputs.image_name }}"